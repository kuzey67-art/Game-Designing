# check your version
import sys
print(sys.version)

print("hello aı")

# run selection
#first select the code and then shift+alt+e

#if you want to bring back your code press cmd +z
# for hashtag press alt + 3
# numbers
3

5.5

3 + 2

4 + 5

if 9 > 3:
    print("nine is greater than three")



type(3) #integer
type(100) #integer
type(5.5) # float
 # type(5,5) # type error, not working

print("kuzey")
type("kuzey")


# comments
# comments can be used to explain python code
# comments can be used to make the code more readable
# comments can be used to prevent  when testing code
type(5.5) # float


# this is a comment
print("hello world")

# comments can be placed at the end of a line and Python ıgnores the rest of the line
print("hello world") # this is a comment


#to add multi-line comment, you can add a # to each line

#it's a comment
#you need  to fix this cod
#look at the data again
print("kuzey")

# if you want to add a multi-line string to your script, you can do so with """ triple quotes

def multiplication(x, y):
    """
    this is a function comment
    :param x:
    :param y:
    :return:
    """
    print(x * y)


multiplication(5,6)

def add(x, y):
    """ this is addition function
    add two numbers for x and y
    """
    print(x + y)

add( 5,10)


#Python Variables
#Variables are used to store data values

#Creating variabes
#A variable is created the first time you assign a value to a variabe

var1 = 5
var2 = 18
print(var1)
print(var2)

var1 * var2


#variables can change type after they are set and are not required to be stated  with a certain type
#Example
x = 9 # x is of type of int.
type(x)

x = "James" # x is now of type str
type(x)


# Casting
# If you wnt to specify the data type of a variable, this can be done with casting
x = str(9)
type(x)

x = int(9) # x will be float
type(x)
print(type(x))

# Get type
# You can get the data type of a variable with the type() function

x = 9
y = "Jason"
print(type(x))
print(type(y))


#single or  double quotes?
## you can use single or double quotes

x = "kemal"
X = "kemal"
# they are the same


# case-sensitive
# variable names are case-sensitive

x = 9
X = "kemal"
print(X)
myvar = "kuzey"
my_var = "kuzey"
_my_var = "kuzey"
myVar = "kuzey"
MYVAR = "kuzey"
myvar2 = "kuzey"


# give a short name of a more descriptive name (age, name, total etc.)
# A varible name must  start with a letter or the underscore charactor
# A variable name cannot start with a number


# not assign, or used
 # 2myvar = "kuzey"
 #my-var = "kuzey"
 #my var = "kuzey"


#one value to muliple variables

x = y = z = "cat"
print(x)
print(y)
print(y)


# unpack collection

fruits = ["apple", "banana", "orange"]
x, y, z = fruits
print(x)
print(y)
print(z)

# print () function is often to output variables
print(x)

print(x, y, z)

# you can also use the + operator tp putput multiple variables

x = "Python "
y= "is "
z = "great "
print(x + y + z)

x = 5
y = 10
print(x + y)

x = 5
y = "John"
print(x + y) # we get error
print(x, y)

x = str(5)
y = "John"
print(x + y)

# Global variables
x = "awesome"

def myfunc():
    print("python is " + x)

myfunc()


# if you crate a variable with the same name  inside a function, this variable will be locl, and
# can be used inside the function , global variable with  the same name will remain as it was
# global and with the original value

x = "awesome"

def myfunc():
    x = "fantastic"
    print("python is " + x)

myfunc()

import pandas as pd











